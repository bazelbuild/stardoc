<!-- Generated with Stardoc: http://skydoc.bazel.build -->

<a name="#my_repo"></a>

## my_repo

<pre>
my_repo(<a href="#my_repo-name">name</a>, <a href="#my_repo-repo_mapping">repo_mapping</a>, <a href="#my_repo-useless">useless</a>)
</pre>

Minimal example of a repository rule.

### Attributes

<table class="params-table">
  <colgroup>
    <col class="col-param" />
    <col class="col-description" />
  </colgroup>
  <tbody>
    <tr id="my_repo-name">
      <td><code>name</code></td>
      <td>
        <a href="https://bazel.build/concepts/labels#target-names">Name</a>; required
        <p>
          A unique name for this repository.
        </p>
      </td>
    </tr>
    <tr id="my_repo-repo_mapping">
      <td><code>repo_mapping</code></td>
      <td>
        <a href="https://bazel.build/rules/lib/dict">Dictionary: String -> String</a>; required
        <p>
          A dictionary from local repository name to global repository name. This allows controls over workspace dependency resolution for dependencies of this repository.<p>For example, an entry `"@foo": "@bar"` declares that, for any time this repository depends on `@foo` (such as a dependency on `@foo//some:target`, it should actually resolve that dependency within globally-declared `@bar` (`@bar//some:target`).
        </p>
      </td>
    </tr>
    <tr id="my_repo-useless">
      <td><code>useless</code></td>
      <td>
        String; optional
        <p>
          This argument will be ignored. You don't have to specify it, but you may.
        </p>
      </td>
    </tr>
  </tbody>
</table>


